Success: no semantic error is found.

================================================================================
Code with indentations:
func GCD :: ( a::int, b::int ) -> int
begin
    var gcd :: int;
    if a = 0 or b = 0 then
        if a = 0 then
            gcd <- b;
        else
            gcd <- a;
        end
    else
        begin
            var _mod :: int;
            if ( a > b ) then
                gcd <- GCD(a - b, b);
            else
                gcd <- GCD(b - a, a);
            end
        end
    end
    return gcd;
end
func main :: (  ) -> int
begin
    var gcd :: int;
    gcd <- GCD(12, 4);
    print gcd;
    gcd <- GCD(4, 12);
    print gcd;
    gcd <- GCD(4, 7);
    print gcd;
    gcd <- GCD(2 * 3 * 5 * 17 * 17, 17 * 4 * 9 * 10);
    print gcd;
    return gcd;
end
================================================================================
Code with indentations and comments for running environment:
func GCD :: ( a::int, b::int ) -> int
// relative address of parameter a from func call base is -1
// relative address of parameter b from func call base is -2
begin
    var gcd :: int; // relative address of local variable gcd from func call base is 1
    if a[-1] = 0 or b[-2] = 0 then
        if a[-1] = 0 then
            gcd[1] <- b[-2];
        else
            gcd[1] <- a[-1];
        end
    else
        begin
            var _mod :: int; // relative address of local variable _mod from func call base is 2
            if ( a[-1] > b[-2] ) then
                gcd[1] <- GCD(a[-1] - b[-2], b[-2]);
            else
                gcd[1] <- GCD(b[-2] - a[-1], a[-1]);
            end
        end
    end
    return gcd[1];
end
func main :: (  ) -> int
begin
    var gcd :: int; // relative address of local variable gcd from func call base is 1
    gcd[1] <- GCD(12, 4);
    print gcd[1];
    gcd[1] <- GCD(4, 12);
    print gcd[1];
    gcd[1] <- GCD(4, 7);
    print gcd[1];
    gcd[1] <- GCD(2 * 3 * 5 * 17 * 17, 17 * 4 * 9 * 10);
    print gcd[1];
    return gcd[1];
end
================================================================================
Execute:
4
4
1
510
Returned value by main: 510
================================================================================
